<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
	<title>Pages</title>
	<description>blog with various projects and articles about computer-related things</description>
	<link>https://www.seignard.fr</link>
<item>
	<title>Tailscale ACL restrictions </title>
	<link>https://www.seignard.fr/tailscale.html</link>
	<guid>https://www.seignard.fr/tailscale.html</guid>
	<dc:date>2023-02-15T00:00:00Z</dc:date>
	<author>antoine</author>
	<description><![CDATA[<h1>Tailscale ACL restrictions </h1>
        <p><strong>Last modification on </strong> <time>2023-02-15</time></p>
        <h1>Restrict access on the infrastructure using tailscale ACL's</h1>
<h2>Introduction</h2>
<p>Tailscale is a great mesh vpn with minimal setup to be able to join a private
network on top of internet.</p>
<p>One of the great feature is to use a <strong>relay[1]</strong> to forward your traffic from
your laptop to your Cloud infrastructure and only using private IP
addresses.</p>
<p>One of the drawback of this feature is that anyone on the mesh can access your
infrastructure.</p>
<p>Godd news is that we can setup <strong>ACL[2]</strong> to restrict access to people.</p>
<h2>Setup ACL's</h2>
<h3>Initial scope</h3>
<p>Let's start with 3 teams: 
<ul>
<li>Developers folks</li>
<li>Data Analysis guys</li>
<li>Platform guys</li>
</ul>
</p>
<p>The Platform guys need to have access all part of the infrastructure.
The Developers folks need only to check the web application.
The Data Analysis folks need only to read some data on staging Databases.</p>
<p>Let's assume that Staging Databases are located on a dedicated subnet:
<code>10.0.42.0/24</code></p>
<h3>Use tags and acl</h3>
<p>There is a file defining the global access policy to tailscale, it's a big JSON
file.</p>
<p>the simplest way to implement our scope policy is to define 3 groups : </p>
<ul>
<li>platform</li>
<li>developer</li>
<li>datanalyst</li>
</ul>
<pre><code>&quot;groups&quot;: {
		&quot;group:platform&quot;: [
			&quot;jean@corp.com&quot;,
			&quot;paulette@corp.com&quot;,
		],
		&quot;group:developer&quot;: [
			&quot;pierre@corp.com&quot;,
			&quot;rachel@corp.com&quot;,
		],
		&quot;group:datanalyst&quot;: [
			&quot;quentin@corp.com&quot;,
			&quot;david@corp.com&quot;,
		],
	},
</code></pre>
<h3>Define the proper ACL</h3>
<p>At this stage, we have 3 user groups then we need to define acl's blocks to
restrict access.</p>
<pre><code>// Access control lists.
&quot;acls&quot;: [
	// Match absolutely everything.
	// Comment this section out if you want to define specific restrictions.
	// Full access
	{&quot;action&quot;: &quot;accept&quot;, &quot;src&quot;: [&quot;group:platform&quot;], &quot;dst&quot;: [&quot;*:*&quot;]},
	// Access to the websites
	{&quot;action&quot;: &quot;accept&quot;, &quot;src&quot;: [&quot;group:developer&quot;], &quot;dst&quot;: [&quot;*:80&quot;]},
	// Access to the database 
	{&quot;action&quot;: &quot;accept&quot;, &quot;src&quot;: [&quot;group:datanalyst&quot;], &quot;dst&quot;: [&quot;*:5432&quot;]},
],
</code></pre>
<h2>References</h2>
<p>[1]: <a href="https://tailscale.com/kb/1021/install-aws/">https://tailscale.com/kb/1021/install-aws/</a></p>
<p>[2]: <a href="https://tailscale.com/kb/1068/acl-tags/">https://tailscale.com/kb/1068/acl-tags/</a></p>
]]></description>
</item>
<item>
	<title>Submodules on Git</title>
	<link>https://www.seignard.fr/submodules.html</link>
	<guid>https://www.seignard.fr/submodules.html</guid>
	<dc:date>2023-02-15T00:00:00Z</dc:date>
	<author>antoine</author>
	<description><![CDATA[<h1>Submodules on Git</h1>
        <p><strong>Last modification on </strong> <time>2023-02-15</time></p>
        <h1>Using Git sub modules</h1>
<h2>Add a git submodule</h2>
<pre><code>$ git add git submodule add -b main https://github.com/slug/repo.git mymodule 
</code></pre>
<h2>When cloning a repo containing submodules</h2>
<pre><code>$ git clone https://github.com/slug/root.git
$ cd root
$ git submodule update --init
</code></pre>
<h2>Updating submodules</h2>
<pre><code>$ git submodule update --remote
</code></pre>
<h2>References</h2>
<p><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">git submodules</a></p>
]]></description>
</item>
<item>
	<title>Logging to Datadog from Nomad workload</title>
	<link>https://www.seignard.fr/nomad_logging.html</link>
	<guid>https://www.seignard.fr/nomad_logging.html</guid>
	<dc:date>2023-01-13T00:00:00Z</dc:date>
	<author>antoine</author>
	<description><![CDATA[<h1>Logging to Datadog from Nomad workload</h1>
        <p><strong>Last modification on </strong> <time>2023-01-13</time></p>
        <h1>Ship logs from Nomad workload to Datadog</h1>
<h2>Context</h2>
<p>One common task to achieve during the build of a platform is to
have logs ship to a central place where they can be searchable.</p>
<p>In modern architectures, most of the workloads are isolated from each others, so this is 
not an easy task to send application logs for several reasons : 
<ul>
<li>Containers are by design isolated</li>
<li>On a Nomad cluster, you can run others tasks such as <strong>java</strong>, <strong>firecracker</strong> VMs, and so.</li>
</ul>
</p>
<h2>Solution</h2>
<p>There are several ways to ship log from a Nomad workload to Datadog.
I will highlight only one, a <strong>sidecar task</strong>.</p>
<p>In Nomad, task groups are sharing a common file system for each allocations running.
have logs ship to a central place where they can be searchable.</p>
<p>Official documentation can be found</p>
<p><a href="https://developer.hashicorp.com/nomad/docs/concepts/filesystem#filesystem">here</a>.
<img src="datadog_shipping_with_a_sidecar_task.png" alt="datadog in nomad
cluster" /></p>
<p>The application need to be configured to log in the allocation storage.</p>
<p>This is an example of sending logs from an application : </p>
<pre><code>config :logger, :error_log, 
	path: &quot;/alloc/data/info.log&quot;,
	level: :debug
</code></pre>
<h2>References</h2>
<blockquote><ul>
<li><a href="https://discuss.hashicorp.com/t/logging-collection-in-docker-and-let-datadog-agent-to-collect-to-display-in-datadog/44482">nomad community discussion</a></li>
<li><a href="https://developer.hashicorp.com/nomad/docs/concepts/filesystem#filesystem">filesystem official documentation</a></li>
</ul>
</blockquote>
]]></description>
</item>
<item>
	<title>Tech News with newsboat</title>
	<link>https://www.seignard.fr/newsboat.html</link>
	<guid>https://www.seignard.fr/newsboat.html</guid>
	<dc:date>2023-03-02T00:00:00Z</dc:date>
	<author>antoine</author>
	<description><![CDATA[<h1>Tech News with newsboat</h1>
        <p><strong>Last modification on </strong> <time>2023-03-02</time></p>
        <p>Chaque personne à sa propre méthode pour faire de la veille technique.</p>
<p>Pour ma part, j'essaye de regrouper un maximum d'information à 1 seul endroit.</p>
<p>une grande partie des sites web ont un flux rss qui est mis à jour dès qu'une
news est publiée.</p>
<p>En utilisant un logiciel pouvant traquer ces flux, la veille est tout de suite
plus simple au quotidien.</p>
<p>Dans ce billet je vais vous présenter un outil que j'utilise pour faire
quotidiennement ma veille.</p>
<h2>Newsboat</h2>
<p>Newsboat est un utilitaire en ligne de commande qui permet de traquer simplement
des flux rss/atom.</p>
<p>Pourquoi newsboat ? </p>
<ul>
<li>pour sa simplicité à configurer</li>
<li>pour la possibilité de ne jamais lever les mains du clavier :)</li>
<li>parce qu'on peut utiliser les touches vim pour naviguer :D</li>
</ul>
<h2>Configuration</h2>
<p>La configuration de Newsboat se fait dans 2 fichiers : </p>
<h3>~/.config/newsboat/config (pour la configuration de newsboat)</h3>
<p>Voici un exemple de configuration : </p>
<pre><code>auto-reload yes
reload-threads 100
# display
show-read-feeds no
feed-sort-order unreadarticlecount-asc
color info default default reverse
color listnormal_unread yellow default
color listfocus blue default reverse bold
color listfocus_unread blue default reverse bold
text-width 80
# unbind keys
unbind-key ENTER
unbind-key j
unbind-key k
unbind-key J
unbind-key K
# bind keys - vim style
bind-key j down
bind-key k up
bind-key l open
bind-key h quit
# highlights
highlight article &quot;^(Title):.*$&quot; blue default
highlight article &quot;https?://[^ ]+&quot; red default
highlight article &quot;\\[image\\ [0-9]+\\]&quot; green default
# open an internet link by typing on ENTER
macro l set browser &quot;open -a Safari %u&quot;; open-in-browser ; set browser &quot;links&quot; define-filter &quot;Starred&quot; &quot;flags = \&quot;s\&quot;&quot;
macro i set browser &quot;feh %u&quot;; open-in-browser ; set browser &quot;elinks %u&quot;
</code></pre>
<h3>~/.config/newsboat/urls (pour la configuration des flux)</h3>
<p>Voici un exmple de configuration :</p>
<pre><code>https://tailscale.com/blog/index.xml
https://www.hashicorp.com/blog/products/nomad/feed.xml
https://news.ycombinator.com/rss
https://www.exploit-db.com/rss.xml
https://www.bsdnow.tv/rss
https://github.blog/changelog/label/actions/feed/
https://github.com/hashicorp/nomad/releases.atom
</code></pre>
]]></description>
</item>
<item>
	<title>Atom feeds on Github</title>
	<link>https://www.seignard.fr/git_atom.html</link>
	<guid>https://www.seignard.fr/git_atom.html</guid>
	<dc:date>2023-02-21T00:00:00Z</dc:date>
	<author>antoine</author>
	<description><![CDATA[<h1>Atom feeds on Github</h1>
        <p><strong>Last modification on </strong> <time>2023-02-21</time></p>
        <h2>Repo releases</h2>
<p>https://github.com/:owner/:repo/releases.atom</p>
<h2>Repo commits</h2>
<p>https://github.com/:owner/:repo/commits.atom</p>
<h2>Private feed</h2>
<p>https://github.com/:user.private.atom?token=:secret</p>
<h2>Repo tags</h2>
<p>https://github.com/:user/:repo/tags.atom</p>
<h2>User activity</h2>
<p>https://github.com/:user.atom</p>
]]></description>
</item>
<item>
	<title>Composite actions on Github</title>
	<link>https://www.seignard.fr/composite.html</link>
	<guid>https://www.seignard.fr/composite.html</guid>
	<dc:date>2023-01-18T00:00:00Z</dc:date>
	<author>antoine</author>
	<description><![CDATA[<h1>Composite actions on Github</h1>
        <p><strong>Last modification on </strong> <time>2023-01-18</time></p>
        <h1>Composite Actions on Github</h1>
<h2>Introduction</h2>
<p>Most of the time when using workflows some steps are duplicated on other
worflows.</p>
<p>When the time come to update those steps, we need to take care about all
different aerea where steps has been duplicated.</p>
<p>It would be more convinient to have a common place where a single update can
rule them all.</p>
<h2>How can we organize this central place ?</h2>
<p>Inside a github organisation, when you have multiple repositories and you want
to share actions between all those repositories.</p>
<ul>
<li>Create a central repository</li>
<li>Clone the repository</li>
<li>Create the expected layout</li>
</ul>
<p><code>mkdir -p .github/workflows/actions</code></p>
<ul>
<li>Move in this directory</li>
</ul>
<p><code>cd .github/workflows/actions</code></p>
<p>For Each composite actions you want to create : </p>
<ul>
<li>Create a directory (this will be the name of the action)</li>
</ul>
<p><code>mkdir mycoolaction</code></p>
<ul>
<li>Create an action.yml file inside this directory.</li>
</ul>
]]></description>
</item>
</channel>
</rss>
